# -*- coding: utf-8 -*-
"""Untitled8.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/16ohEwkB0kxTFOCpGyoK4CMvQyYRdG3JZ
"""

# Import the pandas library, which is a powerful tool for data analysis
import pandas as pd

# Read the internal catalog CSV file into a variable called 'catalog_df'
# The 'df' stands for DataFrame, which is like a table or spreadsheet
catalog_df = pd.read_csv('internal_catalog_dump.csv')

# Print the first 5 rows of the table to see if it loaded correctly
print("Successfully loaded the catalog data:")
print(catalog_df.head())

import pandas as pd
import json

# --- Load the CSV files ---

# Load performance metrics
performance_df = pd.read_csv('performance_metrics.csv')
print("--- Performance Metrics Data ---")
print(performance_df.head())
print("\n") # Adds a blank line for better readability

# Load inventory movements
inventory_df = pd.read_csv('inventory_movements.csv')
print("--- Inventory Movements Data ---")
print(inventory_df.head())
print("\n")


# --- Load the JSON files ---
# JSON files are a bit different, we'll use the 'json' library for them

# Load marketplace snapshot
with open('marketplace_snapshot.json', 'r') as f:
    marketplace_data = json.load(f)
# Let's look at the Amazon products as a sample
print("--- Marketplace Snapshot Data (Amazon Sample) ---")
print(marketplace_data['platforms']['amazon']['products'][:2]) # Print first 2 products
print("\n")

# Load competitor intelligence
with open('competitor_intelligence.json', 'r') as f:
    competitor_data = json.load(f)
print("--- Competitor Intelligence Data ---")
print(competitor_data)
print("\n")

print("--- Running Diagnostic Check: Out of Stock on Amazon ---")

# Get the list of products on Amazon from our loaded data
amazon_products = marketplace_data['platforms']['amazon']['products']

# Loop through each product in the list
for product in amazon_products:
    # Check if the 'availability' status is NOT 'in_stock'
    if product['availability'] != 'in_stock':
        product_title = product['title']
        stock_status = product['availability']
        print(f"ALERT: '{product_title}' is {stock_status}!")

# List of the out-of-stock SKUs you identified
out_of_stock_skus = ['NovaTech Portable Bluetooth Speaker Z2', 'NovaTech 10.5" Tablet P6 (128GB)']

print(f"--- Checking Ad Spend for Out-of-Stock Products ---")

# Filter the performance data to only show rows with these SKUs
wasted_spend_df = performance_df[performance_df['identifier'].isin(out_of_stock_skus)]

if not wasted_spend_df.empty:
    # Calculate the total ad spend for these items from the data we have
    total_wasted_spend = wasted_spend_df['ad_spend'].sum()
    print("ALERT: Found ad spend on out-of-stock products!")
    print(wasted_spend_df)
    print(f"\nTotal potential wasted ad spend found: ${total_wasted_spend:,.2f}")
else:
    print("No ad spend found for the identified out-of-stock products.")

# --- Let's find the original finding in our list and update it ---

# Find the dictionary for 'NT-TABLET-P6' in the list
for finding in diagnostic_findings:
    if finding["product_sku"] == "NT-TABLET-P6":
        # Update the details and recommendation based on your new info
        finding["issue_type"] = "Critical: Out of Stock"
        finding["details"] = "Product is 'temporarily_unavailable' on Amazon. No associated ad spend was found, indicating campaigns are likely paused."
        finding["recommendation"] = "ACTION: Escalate to the inventory team to expedite replenishment. The goal is to get the product back in stock so revenue-driving ad campaigns can be reactivated."

# Print the updated report to see the change
import json
print("--- Updated Diagnostic Report ---")
print(json.dumps(diagnostic_findings, indent=2))

# This list will store all the problems we find.
# Make sure to run this cell once before any others.
diagnostic_findings = []

print("\n--- Running Diagnostic Check: Lost Buy Box on Amazon ---")

# Get the list of products on Amazon from our loaded data
amazon_products = marketplace_data['platforms']['amazon']['products']

# Loop through each product in the list
for product in amazon_products:
    buy_box_winner = product['buy_box_winner']

    # Check if the winner is NOT NovaTech
    if buy_box_winner != 'NovaTech Official':
        product_title = product['title']
        winner_price = product['buy_box_price']

        print(f"ALERT: Buy Box for '{product_title}' is LOST to '{buy_box_winner}' at a price of ${winner_price}.")

        # Now, let's create a report entry for this finding
        # (We need to find the SKU for this product from the catalog)
        # For this example, let's assume 'NovaTech X1 Earbuds (Black)' is 'NT-EARBUD-X1-BLK'

        lost_buy_box_issue = {
            "issue_type": "Critical: Lost Buy Box",
            "product_sku": "NT-EARBUD-X1-BLK", # You'd look this up in catalog_df
            "details": f"The Buy Box on Amazon is being won by '{buy_box_winner}' at a price of ${winner_price}. NovaTech is losing sales to this competitor on their own listing.",
            "recommendation": "Investigate the competitor's pricing. Consider a price match to win back the Buy Box or, if the competitor is violating pricing policy (MAP), report the violation."
        }

        diagnostic_findings.append(lost_buy_box_issue)

print("\n--- Running Diagnostic Check: Lost Buy Box on Amazon ---")

# Get the list of products on Amazon from our loaded data
amazon_products = marketplace_data['platforms']['amazon']['products']

# Loop through each product in the list
for product in amazon_products:
    # Use .get() to safely access the key. If it doesn't exist, it will be 'None'
    buy_box_winner = product.get('buy_box_winner')

    # We only care about products that HAVE a buy box winner, and where it's not NovaTech
    if buy_box_winner and buy_box_winner != 'NovaTech Official':
        product_title = product.get('title', 'Unknown Title') # Also use .get() for safety
        winner_price = product.get('buy_box_price', 0.0)

        print(f"ALERT: Buy Box for '{product_title}' is LOST to '{buy_box_winner}' at a price of ${winner_price}.")

        # --- Add this finding to our main diagnostic report ---

        # We need to map the product title to a SKU from our catalog file.
        # This is a manual step for now.
        sku_mapping = {
            "NovaTech X1 Earbuds (Black)": "NT-EARBUD-X1-BLK",
            "NovaTech Portable Bluetooth Speaker Z2": "NT-SPEAKER-Z2"
            # Add other mappings as you find them
        }
        product_sku = sku_mapping.get(product_title, "SKU_NOT_FOUND")

        lost_buy_box_issue = {
            "issue_type": "Critical: Lost Buy Box",
            "product_sku": product_sku,
            "details": f"The Buy Box on Amazon for '{product_title}' is being won by '{buy_box_winner}' at a price of ${winner_price}. NovaTech is losing sales.",
            "recommendation": "Investigate the competitor's pricing. Consider a price match to win back the Buy Box or, if the competitor is violating pricing policy (MAP), report the violation."
        }

        diagnostic_findings.append(lost_buy_box_issue)

# Let's print the full report to see everything we've found so far
import json
print("\n--- Current Diagnostic Report ---")
print(json.dumps(diagnostic_findings, indent=2))

diagnostic_findings = []

print("\n--- Running Diagnostic Check: Lost Buy Box on Amazon ---")

# --- Create a mapping of Product Titles to SKUs ---
# This helps us easily find the correct SKU for a product title.
sku_mapping = {
    "NovaTech X1 Earbuds (Black)": "NT-EARBU-X1-BLK",
    "NovaTech Portable Bluetooth Speaker Z2": "NT-SPEAKER-Z2"
    # We can add more mappings here as needed
}

amazon_products = marketplace_data['platforms']['amazon']['products']

for product in amazon_products:
    buy_box_winner = product.get('buy_box_winner')

    if buy_box_winner and buy_box_winner != 'NovaTech Official':
        product_title = product.get('title', 'Unknown Title')
        winner_price = product.get('buy_box_price', 0.0)

        # Look up the SKU using our mapping dictionary
        product_sku = sku_mapping.get(product_title, "SKU_NOT_FOUND")

        # Make sure we found a valid SKU before proceeding
        if product_sku != "SKU_NOT_FOUND":
            print(f"ALERT: Buy Box for '{product_title}' (SKU: {product_sku}) is LOST to '{buy_box_winner}' at ${winner_price}.")

            lost_buy_box_issue = {
                "issue_type": "Critical: Lost Buy Box",
                "product_sku": product_sku,
                "details": f"The Buy Box for '{product_title}' is won by '{buy_box_winner}' at ${winner_price}. NovaTech is losing sales.",
                "recommendation": "Investigate pricing. Check for MAP violations and consider a price match if within policy."
            }
            diagnostic_findings.append(lost_buy_box_issue)

print("\n--- Running Diagnostic Check: MAP Violations ---")

# We need to access our catalog data, make sure 'catalog_df' is loaded
# Set the item_code as the index to easily look up products by SKU
catalog_df.set_index('item_code', inplace=True)

# Loop through the findings we already have
for finding in diagnostic_findings:
    # Only check the ones that are 'Lost Buy Box' issues
    if finding["issue_type"] == "Critical: Lost Buy Box":
        sku = finding["product_sku"]

        # Extract the winner's price from the 'details' text (this is a bit advanced)
        winner_price = float(finding["details"].split('$')[-1].split('.')[0])

        # Look up the official MAP from our catalog
        min_price = catalog_df.loc[sku, 'min_advertised_price']

        if winner_price < min_price:
            print(f"VIOLATION FOUND! SKU: {sku} is being sold by a competitor at ${winner_price}, which is below the MAP of ${min_price}.")

            # Let's make our original finding even more powerful by adding this info!
            finding['issue_type'] = "URGENT: MAP Violation & Lost Buy Box"
            finding['details'] += f" This price is BELOW the allowed MAP of ${min_price}."
            finding['recommendation'] = "IMMEDIATE ACTION: Notify the compliance team to issue a violation notice to the seller. Do not price match."

# Display the final, enhanced report
import json
print("\n--- Final, Enhanced Diagnostic Report ---")
print(json.dumps(diagnostic_findings, indent=2))

import numpy as np

print("\n--- Running Diagnostic Check: Ad Performance (ROAS) ---")

# --- Calculate ROAS ---
# First, we need to handle cases where ad_spend is 0 to avoid division errors.
performance_df['ROAS'] = np.where(performance_df['ad_spend'] > 0, performance_df['revenue'] / performance_df['ad_spend'], 0)

# Sort the data so we can easily see trends over time for each product
performance_df_sorted = performance_df.sort_values(by=['identifier', 'week_ending'])


# --- Identify Products with Declining ROAS ---
# Let's focus on a specific product to see if its performance is trending down.
# We'll look at the main earbud product on Amazon.
earbud_amazon_performance = performance_df_sorted[
    (performance_df_sorted['identifier'] == 'NT-EARBUD-X1') &
    (performance_df_sorted['channel'] == 'Amazon')
]

print("\n--- ROAS Trend for 'NT-EARBUD-X1' on Amazon ---")
print(earbud_amazon_performance[['week_ending', 'ad_spend', 'revenue', 'ROAS']].round(2))

# --- Now, let's turn this observation into a finding ---
# From the output, we can see ROAS went from 4.77 to 4.54 to 4.14
# This is a clear negative trend.

declining_roas_issue = {
    "issue_type": "Concerning Trend: Declining Ad Performance",
    "product_sku": "NT-EARBUD-X1",
    "details": "ROAS for the main earbud product on Amazon has declined for three consecutive weeks, from 4.77 down to 4.14. This indicates decreasing ad efficiency.",
    "recommendation": "Audit the Amazon ad campaigns for this SKU. Investigate competitor bidding on primary keywords and analyze the search term report for wasted spend."
}
diagnostic_findings.append(declining_roas_issue)


# --- Let's also find any campaigns that are actively losing money (ROAS < 1) ---
money_losing_campaigns = performance_df_sorted[performance_df_sorted['ROAS'] < 1]

if not money_losing_campaigns.empty:
    print("\nALERT: Found campaigns that are losing money (ROAS < 1)!")
    print(money_losing_campaigns)
    # You would also add these to your findings list
else:
    print("\nNo campaigns found that are actively losing money (ROAS < 1).")

# Display the final, enhanced report
import json
print("\n--- Final, Enhanced Diagnostic Report ---")
print(json.dumps(diagnostic_findings, indent=2))

import json

# The name of the file we want to create
output_file_name = 'diagnostic_report.json'

# Write the 'diagnostic_findings' list to a new JSON file
with open(output_file_name, 'w') as f:
    json.dump(diagnostic_findings, f, indent=4)

print(f"\n✅ Successfully created the report file: '{output_file_name}'")
print("You can now download this file from the 'Files' section on the left.")